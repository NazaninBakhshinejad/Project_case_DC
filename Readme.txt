Item ClassThe Item class represents an item with its dimensions (width, length, height) and whether it is stackable or not. It has methods to calculate its volume, retrieve its corner points, candidate points for placement, current position, change its position, check for collision with another item, and determine if it is on top of another item. ##get_points##This method in the Item class returns a list of eight corner points that define the bounding box of the item. Each point is represented as a tuple (x, y, z), where x, y, and z are the coordinates of the point in three-dimensional space. The points are calculated based on the item's current position (self.x, self.y, self.z) and its dimensions (self.width, self.length, self.height). The eight points represent the corners of the rectangular prism formed by the item.The eight points are ordered in a specific way to ensure consistency: the first four points represent the bottom face of the item, starting from the front-left corner and moving clockwise, and the remaining four points represent the top face of the item, again starting from the front-left corner and moving clockwise.##get_candidate_points##This method returns a subset of the corner points obtained from the get_points method. The subset of points represents the candidate points for placing the item. If the item is not stackable, then only the first four points from the list of corner points are returned. These four points represent the bottom face of the item. By limiting the candidate points to the bottom face, it ensures that the item can only be placed on the floor or a base surface, rather than being stacked on top of another item. On the other hand, if the item is stackable, then all eight corner points from the list of points are returned. This allows the item to be placed not only on the floor but also on top of other items.##has_collision##This method determines whether the current item has a collision with another item passed as an argument to the method. It checks if the bounding boxes of the two items intersect in three-dimensional space.The method takes another item object as a parameter and extracts its position and dimensions. It also retrieves the position and dimensions of the current item as well. Then, the collision check is performed by comparing the coordinates of the two items in all three dimensions (x, y, z). If there is any overlap between the items' bounding boxes in all three dimensions, it indicates a collision. ##has_on_top##This method determines if the current item is on top of another item passed as an argument to the method. It checks if any of the item's corner points coincide with the top face of the other item.The method takes another item object as a parameter and retrieves the corner points of that item using the get_points method. It then checks each corner point of the other item to see if it matches the position of the current item's top face. The top face of the current item is defined by its own position and dimensions. The method checks if each corner point of the other item falls within the x, y, and z ranges of the current item's top face. The has_on_top method records the results for each corner point of the other item in a tuple, with True indicating that the corner point is on top of the current item and False otherwise. The tuple represents the four corners of the other item's bottom face.Finally, the method returns the tuple indicating which corners of the other item are on top of the current item. This data will be used for checking stacking conditions and determining the stability of the arrangement of items in the trailer.Trailer ClassThe Trailer class represents a trailer with its dimensions (width, length, height) and a list of items placed inside it. It has methods to calculate the linear feet occupied by the items, check for collision with the walls of the trailer, add items to the trailer based on placement rules, and a string representation of the trailer.##linear_feet##It calculates the linear feet occupied by the items placed in the trailer. It determines the maximum horizontal extent of items on the left and right sides of the trailer and returns the average value in linear feet. The method iterates over each item in the items list of the Trailer instance. For each item, it checks the x coordinate (horizontal position) and length attribute (horizontal extent) to determine which side of the trailer the item belongs to.If the x coordinate of the item is between 0 and half the width of the trailer, it is considered part of the left side. The method keeps track of the maximum value of y + length (the rightmost point) encountered among the items on the left side.Similarly, if the x coordinate plus the item's width is between half the width of the trailer and the full width of the trailer, or if the x coordinate is between half the width and the full width, it is considered part of the right side. The method keeps track of the maximum value of y + length (the rightmost point) encountered among the items on the right side.After iterating through all the items, the method calculates the average linear feet by summing the maximum values of the rightmost points on both sides, converting them from inches to feet, and dividing the sum by 2. The math.ceil function is applied to round up the average value to the nearest whole number of linear feet.##has_collision_with_walls##This method checks if an item has a collision with the walls of the trailer. It determines whether any of the points defining the item's bounding box extend beyond the dimensions of the trailer.The method takes an item object as a parameter and retrieves the points of the item's bounding box using the get_points method. It then iterates over each point and checks if any of its coordinates exceed the dimensions of the trailer. If a collision with the walls is detected for any of the points, the method returns True, indicating a collision. Otherwise, if none of the points are outside the trailer's dimensions, it returns False, indicating no collision with the walls.The has_collision_with_walls method has been used for ensuring that items placed in the trailer do not extend beyond its boundaries. It helps maintain the integrity and containment of items within the trailer space.##add_item##This method adds an item to the trailer if a suitable position is available. It determines the appropriate position for the item based on the positions of previously placed items and their stacking conditions.The method takes an item object as a parameter and attempts to find a valid position for it in the trailer. It starts by setting a boolean variable point_found to False, indicating that a suitable position has not yet been found for the item. It also initializes a tuple has_on_top to store the stacking conditions of the item on top of other items.If the items list of the trailer is empty and the item does not have a collision with the trailer walls, the item's position is set to (0, 0, 0), (the origin). This is a valid position since it's the first item being added to the trailer. The point_found variable is set to True to indicate a suitable position was found.If there are already items in the trailer, the method generates a list of candidate points by collecting the candidate points of all previously placed items using their get_candidate_points method. The candidate points represent potential positions where the new item can be placed, considering stacking conditions.The candidate points are sorted based on the z-coordinate in descending order, followed by the y-coordinate in ascending order, and then the x-coordinate in ascending order. This sorting order ensures that the item is placed at the highest possible position and as far back as possible within that height level.The method then iterates over the candidate points and checks if the item has a collision with any existing items when placed at each point. It also updates the has_on_top tuple by checking the stacking conditions with the existing items. If a point is found where the item has no collision with other items and satisfies the stacking conditions, as well as not having a collision with the trailer walls, the point_found variable is set to True, and the loop is terminated.After the loop, if the item's z-coordinate is 0, indicating that it is placed at the bottom, the has_on_top tuple is set to (True, True, True, True), indicating that the item is on top of all existing items. If a suitable position (point_found == True) and stacking conditions (has_on_top) are met, the item is added to the items list of the trailer.##add_items##This method is responsible for adding multiple items to the trailer in an optimized manner. It takes a list of items as a parameter and iterates through each item, adding them to the trailer using the add_item method.Before adding the items, the add_items method sorts the items list in descending order based on the item's volume and then the item's width. This sorting order ensures that larger and wider items are placed first, which can help optimize space utilization within the trailer.Once the list is sorted, the method iterates through each item and adds it to the trailer using the add_item method. The add_item method attempts to find a suitable position for each item while considering stacking conditions and collisions with other items and the trailer walls.By adding items in the sorted order, larger items are placed first, which helps create a more stable and efficient arrangement within the trailer. The method makes use of the add_item method's logic to determine the best position for each item, maximizing space utilization and maintaining stability.